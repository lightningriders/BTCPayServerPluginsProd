// <auto-generated />
using System;
using BTCPayServer.Plugins.Lqwd;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace BTCPayServer.Plugins.Lqwd.Migrations
{
    [DbContext(typeof(LqwdPluginDbContext))]
    partial class LqwdPluginDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("BTCPayServer.Plugins.Lqwd")
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("BTCPayServer.Plugins.Lqwd.Data.Bolt11PaymentData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("ExpiresAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("FeeTotalSat")
                        .HasColumnType("bigint");

                    b.Property<string>("Invoice")
                        .HasColumnType("text");

                    b.Property<long>("OrderTotalSat")
                        .HasColumnType("bigint");

                    b.Property<string>("State")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Bolt11PaymentData", "BTCPayServer.Plugins.Lqwd");
                });

            modelBuilder.Entity("BTCPayServer.Plugins.Lqwd.Data.ChannelData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset?>("ExpiresAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("FundedAt")
                        .HasColumnType("text");

                    b.Property<string>("FundingOutpoint")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("ChannelData", "BTCPayServer.Plugins.Lqwd");
                });

            modelBuilder.Entity("BTCPayServer.Plugins.Lqwd.Data.OnchainPaymentData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("ExpiresAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("FeeTotalSat")
                        .HasColumnType("bigint");

                    b.Property<int>("MinFeeFor0Conf")
                        .HasColumnType("integer");

                    b.Property<int>("MinOnchainPaymentConfirmations")
                        .HasColumnType("integer");

                    b.Property<string>("OnchainAddress")
                        .HasColumnType("text");

                    b.Property<long>("OrderTotalSat")
                        .HasColumnType("bigint");

                    b.Property<string>("State")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("OnchainPaymentData", "BTCPayServer.Plugins.Lqwd");
                });

            modelBuilder.Entity("BTCPayServer.Plugins.Lqwd.Data.OrderData", b =>
                {
                    b.Property<string>("OrderId")
                        .HasColumnType("text");

                    b.Property<bool>("AnnounceChannel")
                        .HasColumnType("boolean");

                    b.Property<int>("ChannelExpiryBlocks")
                        .HasColumnType("integer");

                    b.Property<int?>("ChannelId")
                        .HasColumnType("integer");

                    b.Property<long>("ClientBalanceSat")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("ExpiresAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("FundingConfirmsWithinBlocks")
                        .HasColumnType("integer");

                    b.Property<long>("LspBalanceSat")
                        .HasColumnType("bigint");

                    b.Property<string>("OrderState")
                        .HasColumnType("text");

                    b.Property<int?>("PaymentId")
                        .HasColumnType("integer");

                    b.Property<string>("RefundOnchainAddress")
                        .HasColumnType("text");

                    b.Property<int>("RequiredChannelConfirmations")
                        .HasColumnType("integer");

                    b.Property<string>("StoreId")
                        .HasColumnType("text");

                    b.Property<string>("Token")
                        .HasColumnType("text");

                    b.HasKey("OrderId");

                    b.HasIndex("ChannelId");

                    b.HasIndex("PaymentId");

                    b.ToTable("Orders", "BTCPayServer.Plugins.Lqwd");
                });

            modelBuilder.Entity("BTCPayServer.Plugins.Lqwd.Data.PaymentData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("Bolt11Id")
                        .HasColumnType("integer");

                    b.Property<int?>("OnchainId")
                        .HasColumnType("integer");

                    b.Property<string>("OrderId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Bolt11Id");

                    b.HasIndex("OnchainId");

                    b.ToTable("PaymentData", "BTCPayServer.Plugins.Lqwd");
                });

            modelBuilder.Entity("BTCPayServer.Plugins.Lqwd.Data.PluginData", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("PluginRecords", "BTCPayServer.Plugins.Lqwd");
                });

            modelBuilder.Entity("BTCPayServer.Plugins.Lqwd.Data.PluginSettings", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text");

                    b.Property<string>("Key")
                        .HasColumnType("text");

                    b.Property<string>("StoreId")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Settings", "BTCPayServer.Plugins.Lqwd");
                });

            modelBuilder.Entity("BTCPayServer.Plugins.Lqwd.Data.OrderData", b =>
                {
                    b.HasOne("BTCPayServer.Plugins.Lqwd.Data.ChannelData", "Channel")
                        .WithMany()
                        .HasForeignKey("ChannelId");

                    b.HasOne("BTCPayServer.Plugins.Lqwd.Data.PaymentData", "Payment")
                        .WithMany()
                        .HasForeignKey("PaymentId");

                    b.Navigation("Channel");

                    b.Navigation("Payment");
                });

            modelBuilder.Entity("BTCPayServer.Plugins.Lqwd.Data.PaymentData", b =>
                {
                    b.HasOne("BTCPayServer.Plugins.Lqwd.Data.Bolt11PaymentData", "Bolt11")
                        .WithMany()
                        .HasForeignKey("Bolt11Id");

                    b.HasOne("BTCPayServer.Plugins.Lqwd.Data.OnchainPaymentData", "Onchain")
                        .WithMany()
                        .HasForeignKey("OnchainId");

                    b.Navigation("Bolt11");

                    b.Navigation("Onchain");
                });
#pragma warning restore 612, 618
        }
    }
}
